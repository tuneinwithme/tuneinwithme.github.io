// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var app,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  app = window.Tuneinwithme;

  app.Song = (function(_super) {
    __extends(Song, _super);

    function Song() {
      return Song.__super__.constructor.apply(this, arguments);
    }

    Song.prototype.init = function(id) {
      this.id = id;
      this.fetchedInfo = false;
      this.shortId = this.id.replace('spotify:track:', '');
      this.on('focus', (function(_this) {
        return function(thread) {
          if (_this === _this["class"].current) {
            return thread["continue"]();
          }
          _this["class"].previous = _this["class"].current;
          _this["class"].current = _this;
          thread.stackAndContinue([
            function() {
              if (_this["class"].previous) {
                return _this["class"].previous.trigger(thread, 'blur');
              } else {
                return thread["continue"]();
              }
            }, function() {
              return app.Room.current.trigger(thread, 'change-song');
            }, function() {
              return app.view.trigger(thread, 'change-song');
            }
          ]);
          return console.log("song: new! " + _this.id);
        };
      })(this));
      return this.on('blur', (function(_this) {
        return function(thread) {
          return _this.abortFetch(thread);
        };
      })(this));
    };

    Song.prototype.abortFetch = function(thread) {
      var _ref;
      if ((_ref = this.fetchRequest) != null) {
        _ref.abort();
      }
      return thread["continue"]();
    };

    Song.prototype.fetchInfo = function(thread) {
      var url;
      if (this.fetchedInfo) {
        return thread["continue"]();
      } else {
        this.abortFetch;
        url = 'https://api.spotify.com/v1/tracks?' + $.param({
          ids: this.shortId
        });
        return this.fetchRequest = $.getJSON(url, (function(_this) {
          return function(data) {
            var track;
            track = data['tracks'][0];
            _this.image = track['album']['images'][0]['url'];
            _this.thumbnail = track['album']['images'][2]['url'];
            _this.albumName = track['album']['name'];
            _this.artistName = track['artists'][0]['name'];
            _this.name = track['name'];
            _this.fetchedInfo = true;
            return thread["continue"]();
          };
        })(this));
      }
    };

    Song.all = {};

    Song.get = function(id) {
      if (!(id in Song.all)) {
        Song.all[id] = new Song(id);
      }
      return Song.all[id];
    };

    Song.search = function(thread, input) {
      return thread.stackAndContinue([
        function() {
          return Song.searchGettingId(thread, input);
        }, function(id) {
          return thread["continue"](Song.get(id));
        }
      ]);
    };

    Song.searchGettingId = function(thread, input) {
      var m, url;
      if (input.search(/^spotify:track:/) === 0) {
        return thread["continue"](input);
      } else if ((m = input.match(/open.spotify.com\/track\/(\w+)/))) {
        return thread["continue"]('spotify:track:' + m[1]);
      }
      url = 'http://ws.spotify.com/search/1/track.json?' + $.param({
        q: input
      });
      return $.getJSON(url, function(data) {
        if (data.tracks[0]) {
          return thread["continue"](data.tracks[0].href);
        } else {
          throw new Error("No sound found for query \"" + input + "\"");
        }
      });
    };

    Song.current = null;

    Song.previous = null;

    return Song;

  })(app.Base);

}).call(this);
