// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var app,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  app = window.Tuneinwithme;

  app.Room = (function(_super) {
    __extends(Room, _super);

    function Room() {
      return Room.__super__.constructor.apply(this, arguments);
    }

    Room.prototype.init = function(id, active) {
      var url;
      this.id = id;
      this.active = active;
      url = "https://tuneinwithme.firebaseio.com/rooms/" + (this["class"].idToSanitized(this.id)) + "/song/uri";
      console.log("room:", url);
      this.firedata = new Firebase(url);
      this.on('focus', (function(_this) {
        return function(thread) {
          if (_this === _this["class"].current) {
            return;
          }
          _this["class"].previous = _this["class"].current;
          _this["class"].current = _this;
          thread.stack(function() {
            _this.active = true;
            console.log("room: new! " + _this.id);
            app.view.trigger(thread, 'change-room');
            return _this.firedata.on('value', function(data) {
              var currentSong;
              console.log("room: incoming song data", data.val());
              if (!(data && data.val())) {
                return;
              }
              currentSong = app.Song.get(data.val());
              return currentSong.triggerThread('focus');
            });
          });
          if (_this["class"].previous) {
            return _this["class"].previous.trigger(thread, 'blur');
          } else {
            return thread["continue"]();
          }
        };
      })(this));
      this.on('blur', (function(_this) {
        return function(thread) {
          _this.active = false;
          _this.firedata.off();
          return thread["continue"]();
        };
      })(this));
      return this.on('change-song', (function(_this) {
        return function(thread) {
          var _ref;
          return _this.firedata.set((_ref = app.Song.current) != null ? _ref.id : void 0, thread["continue"]);
        };
      })(this));
    };

    Room.idToSanitized = function(dirty) {
      return encodeURIComponent(encodeURIComponent(dirty).replace('.', '%2E'));
    };

    Room.idToDirty = function(sanitized) {
      return decodeURIComponent(decodeURIComponent(sanitized));
    };

    Room.all = {};

    Room.get = function(id) {
      if (!(id in Room.all)) {
        Room.all[id] = new Room(id);
      }
      return Room.all[id];
    };

    Room.current = null;

    Room.previous = null;

    return Room;

  })(app.Base);

}).call(this);
