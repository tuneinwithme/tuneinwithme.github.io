// Generated by CoffeeScript 1.7.1
(function() {
  var View, app,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  app = window.Tuneinwithme;

  View = (function(_super) {
    __extends(View, _super);

    function View() {
      this.goToUrlSuggestedRoom = __bind(this.goToUrlSuggestedRoom, this);
      return View.__super__.constructor.apply(this, arguments);
    }

    View.prototype.init = function() {
      this.on('ready', (function(_this) {
        return function() {
          _this.bindControls();
          return _this.goToUrlSuggestedRoom();
        };
      })(this));
      this.on('change-song', (function(_this) {
        return function() {
          var song;
          song = app.Song.current;
          return song.fetchInfo(function() {
            _this.updateInputIfNecessary('.js-input-song', "" + song.name + " (" + song.id + ")");
            $('.album-art').attr('src', song.image);
            $('.background-album-art').css('background-image', "url(" + song.thumbnail + ")");
            $('.song-title').text(song.name);
            $('.song-artist').text(song.artistName);
            return $('.song-album').text(song.albumName);
          });
        };
      })(this));
      return this.on('change-room', (function(_this) {
        return function() {
          var room;
          room = app.Room.current;
          _this.updateInputIfNecessary('.js-input-room', room.id);
          return _this.urlSuggestedRoom(function(oldRoom) {
            if (oldRoom !== room) {
              return history.pushState({
                id: room.id
              }, '', room.id);
            }
          });
        };
      })(this));
    };

    View.prototype.onControl = function(selector, event, callback) {
      return $(selector).on(event, function(evt) {
        evt.preventDefault();
        return callback();
      });
    };

    View.prototype.bindControls = function() {
      var submitRoom, submitSong;
      submitSong = (function(_this) {
        return function() {
          return _this.searchAndChangeSong($('.js-input-song').select().val());
        };
      })(this);
      submitRoom = (function(_this) {
        return function() {
          return _this.changeRoomById($('.js-input-room').select().val());
        };
      })(this);
      this.onControl('.js-submit-song', 'click', submitSong);
      this.onControl('.js-submit-room', 'click', submitRoom);
      this.onControl('.js-form-song', 'submit', submitSong);
      this.onControl('.js-form-room', 'submit', submitRoom);
      return this.onControl(window, 'popstate', this.goToUrlSuggestedRoom);
    };

    View.prototype.changeRoomById = function(id) {
      return app.Room.get(id).trigger('focus');
    };

    View.prototype.searchAndChangeSong = function(input) {
      return app.Song.search(input, function(song) {
        return song.trigger('focus');
      });
    };

    View.prototype.goToUrlSuggestedRoom = function() {
      this.urlSuggestedRoom(function(room) {
        return room.trigger('focus');
      });
      return $('.js-autofocus').select();
    };

    View.prototype.updateInputIfNecessary = function(selector, value) {
      var $el;
      $el = $(selector);
      if ($el.val() !== value) {
        $el.val(value);
      }
      $el.addClass('flash');
      setTimeout(function() {
        return $el.removeClass('flash');
      }, 0);
      return $el;
    };

    View.prototype.urlSuggestedRoom = function(callback) {
      var id;
      id = $(location).attr('pathname').slice(1);
      if (id.length > 0) {
        return callback(app.Room.get(id));
      } else {
        return console.error('url does not suggest default room');
      }
    };

    return View;

  })(app.Base);

  app.view = new View;

}).call(this);
