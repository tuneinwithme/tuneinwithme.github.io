// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var View, app,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  app = window.Tuneinwithme;

  View = (function(_super) {
    __extends(View, _super);

    function View() {
      return View.__super__.constructor.apply(this, arguments);
    }

    View.prototype.init = function() {
      this.on('ready', (function(_this) {
        return function(thread) {
          _this.bindControls();
          return _this.goToUrlSuggestedRoom(thread);
        };
      })(this));
      this.on('change-song', (function(_this) {
        return function(thread) {
          var song;
          song = app.Song.current;
          return thread.stackAndContinue([
            function() {
              return song.fetchInfo(thread);
            }, function() {
              _this.updateInputIfNecessary('.js-input-song', "" + song.name + " (" + song.id + ")");
              $('.album-art').attr('src', song.image);
              $('.background-album-art').css('background-image', "url(" + song.thumbnail + ")");
              $('.song-title').text(song.name);
              $('.song-artist').text(song.artistName);
              $('.song-album').text(song.albumName);
              return thread["continue"]();
            }
          ]);
        };
      })(this));
      this.on('submit-song', (function(_this) {
        return function(thread) {
          return _this.searchAndChangeSong(thread, $('.js-input-song').select().val());
        };
      })(this));
      this.on('submit-room', (function(_this) {
        return function(thread) {
          return _this.changeRoomById(thread, $('.js-input-room').select().val());
        };
      })(this));
      this.on('change-room', (function(_this) {
        return function(thread) {
          var oldRoom, room;
          room = app.Room.current;
          _this.updateInputIfNecessary('.js-input-room', room.id);
          oldRoom = _this.urlSuggestedRoom();
          if (oldRoom !== room) {
            history.pushState({
              id: room.id
            }, '', room.id);
          }
          return thread["continue"]();
        };
      })(this));
      return this.on('change-url', (function(_this) {
        return function(thread) {
          return _this.goToUrlSuggestedRoom(thread);
        };
      })(this));
    };

    View.prototype.onControl = function(selector, event, trigger) {
      return $(selector).on(event, (function(_this) {
        return function(evt) {
          evt.preventDefault();
          return _this.triggerThread(trigger);
        };
      })(this));
    };

    View.prototype.bindControls = function() {
      this.onControl('.js-submit-song', 'click', 'submit-song');
      this.onControl('.js-submit-room', 'click', 'submit-room');
      this.onControl('.js-form-song', 'submit', 'submit-song');
      this.onControl('.js-form-room', 'submit', 'submit-room');
      return this.onControl(window, 'popstate', 'change-url');
    };

    View.prototype.changeRoomById = function(thread, id) {
      return app.Room.get(id).trigger(thread, 'focus');
    };

    View.prototype.searchAndChangeSong = function(thread, input) {
      return thread.stackAndContinue([
        (function(_this) {
          return function() {
            return app.Song.search(thread, input);
          };
        })(this), (function(_this) {
          return function(song) {
            return song.trigger(thread, 'focus');
          };
        })(this)
      ]);
    };

    View.prototype.goToUrlSuggestedRoom = function(thread) {
      this.urlSuggestedRoom().trigger(thread, 'focus');
      return $('.js-autofocus').select();
    };

    View.prototype.updateInputIfNecessary = function(selector, value) {
      var $el;
      $el = $(selector);
      if ($el.val() !== value) {
        $el.val(value);
      }
      $el.addClass('flash');
      setTimeout(function() {
        return $el.removeClass('flash');
      }, 0);
      return $el;
    };

    View.prototype.urlSuggestedRoom = function() {
      var roomId;
      roomId = $(location).attr('pathname').slice(1);
      if (roomId.length > 0) {
        return app.Room.get(roomId);
      } else {
        throw new Error('URL does not suggest default room');
      }
    };

    return View;

  })(app.Base);

  app.view = new View;

}).call(this);
