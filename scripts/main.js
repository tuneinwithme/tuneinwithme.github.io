// Generated by CoffeeScript 1.7.1
(function() {
  var LiveDJ, Room, Song, View;

  ({
    search: function(query, callback) {
      var url;
      url = 'http://ws.spotify.com/search/1/track.json?q=' + $.param({
        q: query
      });
      return $.getJSON(url, function(data) {
        var _ref;
        return callback((_ref = data.tracks[0]) != null ? _ref.href : void 0);
      });
    }
  });

  Room = (function() {
    function Room(name) {
      this.name = name;
    }

    Room.current = null;

    Room.last = null;

    Room.change = function() {
      var roomName;
      if (this.current === this.last) {
        return;
      }
      console.log(this);
      roomName = roomName.toLowerCase();
      this.currentSongData = new Firebase('https://tuneinwithme.firebaseio.com/rooms/' + roomName + '/song');
      this.currentSongData.on('value', (function(_this) {
        return function(data) {
          if (!(data && data.val())) {
            return;
          }
          _this.lastInput = data.val();
          _this.lastTrackURL = _this.inputToTrackURL(_this.lastInput);
          _this.currentSongData.set((_this.lastTrackURL ? _this.lastTrackURL : null));
          _this.updateInputIfNecessary('#songinput', _this.lastTrackURL);
          _this.updatePicture();
          _this.changeBackground();
          return console.log('Track URL updated: ', _this.lastTrackURL);
        };
      })(this));
      this.updateInputIfNecessary('#roominput', roomName);
      return console.log('room changed to ' + roomName);
    };

    return Room;

  })();

  Song = (function() {
    var getCurrent;

    function Song() {}

    getCurrent = function() {
      return this.currentSongData = new Firebase('https://tuneinwithme.firebaseio.com/rooms/' + roomName + '/song');
    };

    Song.current = null;

    Song.last = null;

    return Song;

  })();

  LiveDJ = (function() {
    function LiveDJ() {
      throw new Error('non-instantiable class');
    }

    LiveDJ.init = function() {
      return $(document).ready((function(_this) {
        return function() {
          var callback, selector, _ref, _results;
          Room.change(new Room('tuneinwithme'));
          $('.js-autofocus').select();
          _ref = _this.buttonBindings;
          _results = [];
          for (selector in _ref) {
            callback = _ref[selector];
            _results.push($(selector).click(function(evt) {
              evt.preventDefault();
              return callback();
            }));
          }
          return _results;
        };
      })(this));
    };

    LiveDJ.buttonBindings = {
      '.js-submit-song': function() {
        LiveDJ.currentSongData.set($('#songinput').val());
        return $('#songinput').select();
      },
      '.js-submit-room': function() {
        LiveDJ.changeRoom($('#roominput').val());
        return $('#roominput').select();
      }
    };

    return LiveDJ;

  })();

  View = (function() {
    function View() {}

    View.prototype.updatePicture = function() {
      var response, trackID;
      trackID = this.lastTrackURL;
      return response = $.getJSON('https://embed.spotify.com/oembed/?url=' + trackID + '&callback=?', function(data) {
        var albumTitle, bigImage;
        console.log(response);
        bigImage = data.thumbnail_url.replace(/\/cover\//, '/640/');
        $('#albumimage').attr('src', bigImage);
        albumTitle = document.createElement('text');
        albumTitle.innerHTML = data.title;
        console.log(albumTitle);
        return $('#titleContainer').html(albumTitle);
      });
    };

    View.prototype.updateInputIfNecessary = function(selector, value) {
      var $el;
      $el = $(selector);
      if ($el.val() !== value) {
        $el.val(value);
      }
      $el.addClass('flash');
      return setTimeout(function() {
        return $el.removeClass('flash');
      }, 0);
    };

    View.prototype.inputToTrackURL = function(input) {
      var m;
      if (input.search(/^spotify:track:/) === 0) {
        return input;
      }
      m = input.match(/open.spotify.com\/track\/(\w+)/);
      if (m) {
        return 'spotify:track:' + m[1];
      }
      return this.search(input);
    };

    View.prototype.changeBackground = function() {
      var hour;
      hour = new Date().getHours();
      if (hour < 7 || hour > 18) {
        $('body').removeClass('day');
        return $('body').addClass('night');
      } else {
        $('body').removeClass('night');
        return $('body').addClass('day');
      }
    };

    return View;

  })();

  LiveDJ.init();

}).call(this);
